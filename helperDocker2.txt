https://selectel.ru/blog/docker-install-ubuntu/

sudo docker build -t my_image .      --create image with name 'my_image' 
or
sudo docker build .                  --create image

docker image ls                      --list image

docker image rm my_id                --del image with id
----------------------------------------------------------------------------------------------
docker run -p 3000:3000 my_id         --run container with id
or
docker run -p 3000:3000 my_image       --run container with name

for exit Ctrl-c
or 
docker container stop [container_id]   --stop container_id

docker container ls                    --list container
docker container ls -a                 --list container all info 

docker container rm [container_id]     --del container with container_id
-----------------------------------------------------------------------------------------------
Manage image, exempl:   docker image ls
Commands:
  build       Build an image from a Dockerfile
  history     Show the history of an image
  import      Import the contents from a tarball to create a filesystem image
  inspect     Display detailed information on one or more images
  load        Load an image from a tar archive or STDIN
  ls          List images
  prune       Remove unused images
  pull        Pull an image or a repository from a registry
  push        Push an image or a repository to a registry
  rm          Remove one or more images
  save        Save one or more images to a tar archive (streamed to STDOUT by default)
  tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE

Manage containers
Commands:
  attach      Attach local standard input, output, and error streams to a running container
  commit      Create a new image from a container's changes
  cp          Copy files/folders between a container and the local filesystem
  create      Create a new container
  diff        Inspect changes to files or directories on a container's filesystem
  exec        Run a command in a running container
  export      Export a container's filesystem as a tar archive
  inspect     Display detailed information on one or more containers
  kill        Kill one or more running containers
  logs        Fetch the logs of a container
  ls          List containers
  pause       Pause all processes within one or more containers
  port        List port mappings or a specific mapping for the container
  prune       Remove all stopped containers
  rename      Rename a container
  restart     Restart one or more containers
  rm          Remove one or more containers
  run         Run a command in a new container
  start       Start one or more stopped containers
  stats       Display a live stream of container(s) resource usage statistics
  stop        Stop one or more running containers
  top         Display the running processes of a container
  unpause     Unpause all processes within one or more containers
  update      Update configuration of one or more containers
  wait        Block until one or more containers stop, then print their exit codes 
  
--------------------------------------------------------------------------------------------
dockerfile

 FROM используется один раз в начале, Dockerfileчтобы указать, 
      какой базовый образ использовать

 ARG определяет переменные, которые пользователи передают во время сборки 

 USER устанавливает имя пользователя или группу пользователей
      при запуске образа Docker
 COPY копирует файлы и каталоги в контейнер

 WORKDIR устанавливает рабочий каталог контейнера

 ENV устанавливает переменную среды

 RUN запускает команду оболочки, которая вызывает /bin/sh -c Linux

 EXPOSE информирует Docker о том, что контейнер прослушивает указанные сетевые порты
      во время выполнения, используется для локального тестирования приложений Docker

 CMD используется один раз в конце Dockerfileи содержит последнюю команду 
      для запуска выполнения контейнера


 FROM node:16-alpine
 WORKDIR /app
 COPY . .
 RUN npm install
 RUN npm run build
 EXPOSE 3000
 CMD npm run start

FROM node:16-alpine
WORKDIR /app
COPY package*.json ./     
RUN npm install
COPY . .
RUN npm run build
EXPOSE 3000
CMD npm run start


|__here cash package*.json
--------------------------------------------------------------------------------------------
How to fix docker: Got permission denied issue
https://stackoverflow.com/questions/48957195/how-to-fix-docker-got-permission-denied-issue

If you want to run docker as non-root user then you need to add it to the docker group.

Create the docker group if it does not exist
$ sudo groupadd docker

Add your user to the docker group.
$ sudo usermod -aG docker $USER

Log in to the new docker group
 (to avoid having to log out / log in again; but if not enough, try to reboot):
$ newgrp docker

Check if docker can be run without root
$ docker run hello-world

Reboot if still got error
$ reboot

--------------------------------------------------------------------------------------

build in heroku
https://devcenter.heroku.com/categories/deploying-with-docker

create file heroku.yml

build:
  docker:
    web: Dockerfile


---------------------------------------------------------------------------------------
install CLI Heroku
https://devcenter.heroku.com/articles/heroku-cli#standalone-installation-with-a-tarball

in terminal:
curl https://cli-assets.heroku.com/install.sh | sh

heroku login 
перенаправляет в браузер где залогинился в хероке и обратно в терминал

----------------------------------------------------------------------------------------
в вскоде создаем папку и в терменале как обычно 
заходим в нее
git config --global user.name "Arkadiy2907"
git config --global user.email arkadiy2907@gmail.com
git init
git clone беру из гита нужный репозиторий
захожу в созданную папку cd middle.messenger.praktikum.yandex
git branch heroku
git checkout heroku