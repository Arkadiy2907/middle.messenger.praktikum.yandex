Добрый день) Работа уже близка к тому состоянию, в котором её можно принять, но осталось исправить несколько моментов:

есть страницы, где дублируется шаблон, так же там дублируются стили, нужно либо сделать общий компонент, либо вынести отдельно стили и переиспользовать их
нетлифай отдает 404, так же в readme файле нет ссылки на нетлифай
можно не делать на каждый отдельный инпут свой компонент, а сделать один общий и переиспользовать
так же в проект есть компоненты инпутов, но не везде они используются
Давай поправим эти моменты и перейдем к следующему спринту)
**Добрый день! Работу поправил, дублирования убрал, добавил компоненты и вынес отдельно стили, нетфлай работает.


++В игнор еще нужно добавить папку dist
Для git важно наличие пустой строки в конце файла.
**dist добавил, лишнее удалил

++Лучше задавать фиксированные версии зависимостям.
Если вы однажды решите, удалить package-lock.json файл и попытаться повторно установить зависимости с помощью команды npm install, 
npm установит последние версии зависимостей, что может привести к ошибкам.
Плюс никогда не знаешь в какой версии появляется та или иная уязвимость, поэтому крайне рекомендую использовать статичную версию
** Удалил префикс дял версий

++Часто требуется возможность получить порт снаружи скрипта, не изменяя код, это можно сделать через переменное окружение:
process.env.PORT || PORT;
**изменил на const port = process.env.PORT || 3000;

-+Попробуй посмотреть в сторону методологии БЭМ. Она позволит уменьшить каскадность в css и еще избавит от кучи проблем.
Здесь у тебя у селекторов, достаточно большая вложенность.
Чем больше вложенность - тем больше бардака, больший вес файла, медленная загрузка.
**постоянно пытаюсь и понимаю что так лучше, но не получается пока...

++Лучше не обращаться к нативному тегу, а задать для него отдельный класс.
Например при изменении тэгов в шаблоне, в таком случае код будет продолжать работать, если в стили прописаны через имена классов)
Хорошая статься не эту тему.
**добавил классы для исключения обращения к тегам, обращался только к тем кто не будет меняться

++Немного поехала верстска,
Вообще для форматирования часто применяется prettier, он форматирует весь код в едином стиле.
**тоже использую  prettier, странно вроде все проверял. Спасибо, исправил!

++Хорошей практикой является использование rem и em вместо px
**изменил для большинства на рем

++Лучше не опускать фигурные скобки, так теряется читабельность кода 
**добавил фигурные скобки

++Нет необходимости делать на каждый отдельный инпут, свой компонент.
Можно сделать 1 компонент инпута и в пропсах принимать значение label и прочие значение относящиеся к инпутам
**переделал под цельные компоненты

++В js принят формат именования camelCase, лучше его и придерживаться
**изменил в camelCase

++Есть же отдельные компоненты для инпута, почему бы не использовать их?
**Полносью переделал для всех инпутов

++Вот этот элемент чата дублируется, хорошо бы его тоже сделать отдельным компонентом)
**изменил (убрал дублирование)

++Для времени и даты, есть специальный тег time
**поставил тег time

++Если это главный заголовок на странице, то его лучше сделать тегом h1.
Эти заголовки читает скринридер и хорощо бы их правильно структурировать. Хорошая статья на эту тему
**изменил заголовки согласно статье, Спасибо.

++Вот этот элемент тоже дублируется на нескольких страницах, было бы хорошо и его вынести в отдельный компонент
**создал новый компонент blueCircle

++Вот эти стили дублируются на нескольких страницах, нужно вынести их либо в отдельный файл. 
Либо сделать отдельный компонент со стилями и переиспользовать его
**изменил (убрал дублирование)

++И вот эти тоже дублируются, нужно пробежать по проекту и убрать дублирование, 
мы же по сути для этого и используем препроцессор, чтобы избегать дублирования и облегчить себе жизнь
**изменил (убрал дублирование)

++chatOnline и searchChat похожи между собой, многое дублируется. Нужно что-то с этим сделать)
**Переделал под компонеты

============================================================================================================================
rev2
============================================================================================================================

Спасибо за твои правки, код стал получше. Есть несколько моментов над которыми я настоятельно рекомендую подумать к следующему спринту.

в проект должна соблюдаться четкая структуру, она сейчас есть, но стоит подправить, в pages должны лежать конченые страницы, т/е то что в будущем будет на отдельных роутах
стоит поработать над названиями файлов, файлы должны отражать суть того, что там происходит, ну и в основном это должны быть существительные, сейчас трудно понять вообще почему файлы названы именно так, как называны) иногда заходишь в inout ждешь там поле ввода, а там целая форма
некоторые компоненты стоит разбить на отдельные части
В целом работа неплохая, надеюсь ты сможешь поправить эти моменты к следующему спринту.

Все таки мы пишем код для людей, и даже если какие-то решения в коде не будут гениальными, то чистый код всегда будет радовать)

Советую почитать:

https://github.com/ryanmcdermott/clean-code-javascript
https://www.ozon.ru/product/sovershennyy-kod-master-klass-138437220/


++src/components/blueCircle/index.js
Здесь, не совсем правильно ты сделал, что использовал 1 компонент для 3 абсолютно разных элементов. 
В 1 случае у тебя это счетчик сообщений, в другом - кнопка отправки сообщения, в 3 новое сообщение.
В данном случае это изолированные элементы и то, что их объединяет синий кружок еще не значит что это один компонент.
Одним компонентом они были бы, если бы это были счетчики разных цветов или что то подобное. Поэтому, 
лучше разбить их на 3 разных компонента
**разбил на компоненты


++src/components/chat/index.js
Папка названа немного странно. По сути это вообще не чаты, а сообщения. В одном случае это само сообщение пользователя,
в другом это скорее как элемент списка в левом меню.Я бы их тоже разделил на 2 разных компонента. 
Они сильно отличаются визуально. Ну и логика у них абсолютно разное, в одном случае это просто сообщение, 
а в другом это скорее как элемент меню, на которое можно кликнуть и тд
**создал компонент massage 

++src/components/input/index.js
Здесь, название у папки input, хотя по сути это вообще разные формы. Тогда папку следует переименовать в forms,
и внутри сделать отдельные компоненты с каждой отдельной формой. Не нужно их объединять в одном общем файле
**переделал компоненты с созданием инпутов для отслежевание событий


++<form id="changeProfile__form" class="profile__form" name="changeProfile__form" action="/profile">
id лучше вообще не использовать)
**id удалил

++src/components/loadAvatar/index.js
if (type === 'chooseFile') {
Когда мы видим вот такой набор if-ов, почти всегда это значит, что стоит разбить 1 компонент на несколько разных. 
В дальнейшем, когда добавится логика внутрь каждого компонента, с разными частями будет проще работать 
и у каждого компонента будет своя зона ответственности
**разделил на отдельные компоненты

++src/pages/chatOnline/_chatOnline.scss
Немного странно, что все файлы стилей начинаются с _. Для js это выглядит как-то не так, как принято) Я бы убрал
**_ убрал

++src/pages/fiveHundred/_fiveHundred.scss
Не понял вообще, зачем в pages лежат стили для разных ошибок? В проекте нужно придерживаться единой структуры. 
У нас в pages должна лежать сама страница с ошибкой, ее шаблон, js файл и файл стилей.
**в pages сделал два отдельных компонента, pageError удалил, стили переиспользую

++src/components/button/tplBtnText.hbs
Немного вводит в заблуждение то, что файлы называется button а по факту тут лежит ссылка. 
Так еще и непонятно почему 2 разных файла и где один из них используется. Стили нужно складывать в те места где они используются
**разделил на два компонента button, link